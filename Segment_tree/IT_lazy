//https://oj.vnoi.info/problem/segtree_itlazy
#include <bits/stdc++.h>
#define el cout<<"\n"
#define nmax 100000
using namespace std;

long int st[nmax*4],Lazy[nmax*4];

void push(int id)
{
	if(Lazy[id])
	{
		st[id*2] += Lazy[id];
		st[id*2 + 1] += Lazy[id];
		
		Lazy[id * 2] += Lazy[id];
		Lazy[id * 2 +1] += Lazy[id];
		
		Lazy[id] = 0;
	}
}

long int get(int id,int l,int r,int u,int v)
{
	if(v<l || u>r) return -1e9;
	
	if(u<=l && r<=v) {
		return st[id];
	}
	
	int mid = l - (l-r)/2;
	push(id);
	return max(get(id*2,l,mid,u,v),get(id*2+1,mid+1,r,u,v));
}

void update(int id,int l,int r,int u,int v,int x)
{
	if (v<l || u>r) return;
	
	if(u<=l && r<=v) {
		st[id] += x;
		Lazy[id] +=x;
		return;
	}
	
	int mid = l - (l-r)/2;
	push(id);
	update(id*2,l,mid,u,v,x);
	update(id*2+1,mid+1,r,u,v,x);
	
	st[id] = max(st[id*2],st[id*2+1]);
}

int main()
{
	int n,q; cin>>n;
	for(int i = 0; i<n; i++)
	{
		int x; cin>>x;
		update(1,0,n-1,i,i,x);
	}
	cin>>q;
	while(q--)
	{
		int op,l,r,x,y,val;
		cin>>op;
		if(op == 1)
		{
			cin>>x>>y>>val;
			update(1,0,n-1,x-1,y-1,val);	
		}	
		else if(op == 2) 
		{
			cin>>l>>r;
			cout<<get(1,0,n-1,l-1,r-1);
			el;
		}
		
	}	
	return 0;
}
