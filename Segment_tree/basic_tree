// Cho mang A gom n phan tu
// Cho 4 loai truy van
// 1 l r: in ra tong cac phan tu tu l..r
// 2 l r: in ra gtln cac phan tu tu l..r
// 3 l r x: tang gia tri cac phan tu tu l..r len x don vi
// 4 i x: gan A[i] = x

// 6 6
// 4 5 2 7 3 1
// 1 1 4 => 18
// 2 2 6 => 7
// 3 1 3 2 => Tang 6
// 1 1 6 => 28
// 4 1 5
// 1 1 6 => 27





#include <bits/stdc++.h>
#define ll long long

using namespace std;

const int MAX = 1e5;
const int INF = 1e9 + 7;

struct Node {int max, sum, lazy;};

int n, q;
vector<int> A;
vector<Node> ST(4 * MAX);

void build(int id, int l, int r)
{
	if (l > r) return;
	if (l == r) ST[id] = {A[l], A[l], 0};
	else
	{
		int mid = (l + r) / 2;
		build(2 * id, l, mid);
		build(2 * id + 1, mid + 1, r);
		ST[id].max = max(ST[2 * id].max, ST[2 * id + 1].max);
		ST[id].sum = ST[2 * id].sum + ST[2 * id + 1].sum;
	}
}

void fix(int id, int l, int r)
{
	ST[id].max += ST[id].lazy;
	ST[id].sum += ST[id].lazy * (r - l + 1);

	if (l < r)
	{
		ST[2 * id].lazy += ST[id].lazy;
		ST[2 * id + 1].lazy += ST[id].lazy;
	}

	ST[id].lazy = 0;
}

int getMax(int id, int l, int r, int x, int y)
{
	fix(id, l, r);
	if (r < x || l > y) return -INF;
	if (x <= l && y >= r)
	{
		fix(id, l, r);
		return ST[id].max;
	}

	int mid = (l + r) / 2;
	int max1 = getMax(2 * id, l, mid, x, y);
	int max2 = getMax(2 * id + 1, mid + 1, r, x, y);
	return max(max1, max2);
}

int getSum(int id, int l, int r, int x, int y)
{
	fix(id, l, r);
	if (r < x || l > y) return 0;
	if (x <= l && y >= r)
	{
		fix(id, l, r);
		return ST[id].sum;
	}

	int mid = (l + r) / 2;
	int sum1 = getSum(2 * id, l, mid, x, y);
	int sum2 = getSum(2 * id + 1, mid + 1, r, x, y);
	return sum1 + sum2;
}

void update1(int id, int l, int r, int i, int x)
{
     fix(id, l, r);

	if (i < l || i > r) return;
	if (l == r)
	{
		ST[id] = {x, x, 0};
		return;
    }

	int mid = (l + r) / 2;
	update1(2 * id, l, mid, i, x);
	update1(2 * id + 1, mid + 1, r, i, x);
	ST[id].max = max(ST[2 * id].max, ST[2 * id + 1].max);
	ST[id].sum = ST[2 * id].sum + ST[2 * id + 1].sum;
}

void update2(int id, int l, int r, int x, int y, int val)
{

	if (r < x || l > y || l > r) return;
	if (x <= l && y >= r)
	{
		ST[id].lazy += val;
		fix(id, l, r);
		return;
	}
    fix(id, l, r);
	int mid = (l + r) / 2;
	update2(2 * id, l, mid, x, y, val);
	update2(2 * id + 1, mid + 1, r, x, y, val);
	ST[id].max = max(ST[2 * id].max, ST[2 * id + 1].max);
	ST[id].sum = ST[2 * id].sum + ST[2 * id + 1].sum;
}

int main()
{
	cin >> n >> q;
	A.resize(n + 1);
	ST.resize(n*4);
	for (int i = 1; i <= n; i++) cin >> A[i];
	build(1, 1, n);

	while (q--)
	{
		int mod, l, r, x, i;
		cin >> mod;
		switch (mod)
		{
			case 1:
				cin >> l >> r;
				cout << getSum(1, 1, n, l, r) << endl;
				break;

			case 2:
				cin >> l >> r;

				cout << getMax(1, 1, n, l, r) << endl;
				break;

			case 3:
				cin >> l >> r >> x;
				update2(1, 1, n, l, r, x);
				break;

			case 4:
                {
                    cin >> i >> x;
                    update1(1, 1, n, i, x);
                } break;

		}
	}

	return 0;
}
